name: Docker Image CI

on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ secrets.AGGREGION_REGISTRY_USERNAME }}
          password: ${{ secrets.AGGREGION_REGISTRY_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          set +e
          set -x
          git_hash=${GITHUB_SHA::8}
          git_branch=$(echo ${GITHUB_REF} | sed 's;refs/heads/;;' | sed -r 's/[:/.]+/-/g' | tr -dc 'a-zA-Z0-9_-')
          git_branch_build=""
          cache_tag="develop"
          if [[ "$GITHUB_REF" != "refs/heads/"* ]]; then
            unset git_branch
          else
            git_branch_build="$git_branch-$git_hash-$GITHUB_RUN_NUMBER"
            git_tag=$(git tag --contains=${git_branch} 2>/dev/null | sed -r 's/[:/.]+/-/g' | head -n 1 | tr -dc 'a-z0-9A-Z_-')
            cache_tag="$git_branch"
          fi
          if [[ "$git_branch" == *"master"* ]]; then
            othertags="latest"
          fi
          image=${{env.IMAGE_NAME}}
          set -e
          echo "::group::Build image"
          DOCKER_BUILDKIT=1 docker build \
            --cache-from $image:$cache_tag \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg "BUILD_GIT_BRANCH=$git_branch" \
            --build-arg "BUILD_GIT_HASH=$git_hash" \
            --build-arg "BUILD_GIT_TAG=$git_tag" \
            -f Dockerfile \
            -t $image:$git_hash .
          echo "::endgroup::"
          echo "::group::Push images"
          for tag in $git_hash $git_tag $git_branch $git_branch_build ${{env.INPUT_CUSTOMTAG}} $othertags $cache_tag; do
            docker tag $image:$git_hash $image:$tag
            docker push $image:$tag
          done
          echo "::endgroup::"
